; -*- lisp -*-
; Emacs config file - get latest version from:
; $HeadURL$

(add-to-list 'load-path "~/elisp")

; can probably save this somewhere else since I don't use mutt anymore
(define-derived-mode mutt-mode text-mode "Mutt"
  "Major mode for editing Mutt email messages"
  (set-fill-column 72)
  (auto-fill-mode 1))
(add-to-list 'auto-mode-alist '("mutt" . mutt-mode))

; Tuareg mode for OCaml
(add-to-list 'load-path "~/elisp/tuareg-mode")
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
(setq auto-mode-alist 
      (append '(("\\.ml[ily]?$" . tuareg-mode)
                ("\\.topml$" . tuareg-mode))
              auto-mode-alist))

; show SVN status in modeline
(require 'psvn)
(add-to-list 'vc-handled-backends 'SVN)

; load full-ack
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)

; load yasnippet
(add-to-list 'load-path "~/elisp/yasnippet")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/elisp/yasnippet/snippets")

;; load my custom anything config
(if (file-exists-p "~/elisp/anything-epe.el")
    (load "~/elisp/anything-epe.el"))

; load NXHTML
; (load "~/Downloads/nxhtml/autostart.el")

(if (file-exists-p "~/elisp/js2-epe.el")
    (load "~/elisp/js2-epe.el"))
(if (file-exists-p "~/elisp/syncer.el")
    (load "~/elisp/syncer.el"))
(if (file-exists-p "~/elisp/ffap-epe.el")
    (load "~/elisp/ffap-epe.el"))
(if (file-exists-p "~/elisp/mark-whole-word.el")
    (load "~/elisp/mark-whole-word.el"))
(if (file-exists-p "~/elisp/find-file-in-home-dir.el")
      (load "~/elisp/find-file-in-home-dir"))
(load "~/elisp/sizes.el")

; automatically set these modes based on filenames:
(add-to-list 'auto-mode-alist '("\\.ftl$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.jsp$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.tag$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.txt$" . auto-fill-mode))

; don't put no tabs in my files!
(setq-default indent-tabs-mode nil)

; turn off some annoying frills
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))  
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

; turn on some useful frills
(fset 'yes-or-no-p 'y-or-n-p)
(global-font-lock-mode 1)
(auto-compression-mode 1)
(put 'set-goal-column 'disabled nil)
(setq-default comment-style 'multi-line)
;(iswitchb-mode 1)                       ; don't need this now that we have anything.el
;(setq iswitchb-buffer-ignore '("^ " "^\\*[^s]"))
(setq initial-frame-alist '((top . 26) (left . 8) (width . 100) (height . 50)))

; bind some useful keys
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'isearch-backward-regexp)
(global-set-key "\M-p" 'pwd)
(global-set-key "\M-/" 'hippie-expand)

; Turns out C-Backspace in Windows does a backward-kill-word.  Is
; there any way to rebind it in emacs for consistency?  e.g.:
;(global-set-key [(control backspace)] 'backward-kill-word)
; better yet, rebind windows to use M-Backspace for b-k-w

; how hard is it to make emacsclient switch to the correct screen when invoked?
(server-start)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(backup-directory-alist (quote (("." . "~/.emacs-backups"))))
 '(desktop-save-mode t)
 '(hippie-expand-try-functions-list (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-dabbrev try-expand-list try-expand-line try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)))
 '(js2-auto-indent-flag nil)
 '(js2-basic-offset 4)
 '(js2-bounce-indent-flag nil)
 '(js2-mode-escape-quotes nil)
 '(mac-command-modifier (quote meta))
 '(mac-option-modifier (quote meta))
 '(mumamo-chunk-coloring (quote no-chunks-colored))
 '(nxml-outline-child-indent 4)
 '(sgml-basic-offset 4)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
